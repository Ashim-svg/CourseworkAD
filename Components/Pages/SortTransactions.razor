@page "/weather"
@using CourseworkAD.Model
@using CourseworkAD.Services
@inject TransactionService TransactionService

<h3>Quick Search Transactions</h3>

<div class="container mt-4">
    <div class="row mb-4">
        <!-- Sort Order Section -->
        <div class="col-md-6">
            <label for="sortOrder" class="form-label">Sort Transactions</label>
            <select id="sortOrder" class="form-select" @bind="SortOrder">
                <option value="" disabled>Select Sort Order</option>
                <option value="dateAsc">Date Ascending</option>
                <option value="dateDesc">Date Descending</option>
                <option value="amountAsc">Amount Ascending</option>
                <option value="amountDesc">Amount Descending</option>
            </select>
        </div>

        <!-- Search Section -->
        <div class="col-md-6">
            <label for="searchTitle" class="form-label">Search by Title</label>
            <input type="text" id="searchTitle" class="form-control" @bind="SearchTitle" placeholder="Enter title to search" />
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <button class="btn btn-success" @onclick="OnSortAndSearch">Apply Sort & Search</button>
    </div>

    <!-- Results Section -->
    <h4 class="mt-5">Filtered Transactions</h4>
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>Date</th>
                    <th>Title</th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Tags</th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredTransactions != null && FilteredTransactions.Any())
                {
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <tr>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>@transaction.Title</td>
                            <td>@transaction.Type</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            <td>@transaction.Tags</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No matching transactions found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    h3 {
        color: #2c3e50;
        text-align: center;
        font-weight: bold;
    }

    .table {
        font-size: 1rem;
        border-collapse: collapse;
    }

        .table th, .table td {
            text-align: center;
            vertical-align: middle;
        }

    .btn-success {
        background-color: #27ae60;
        border-color: #27ae60;
    }

        .btn-success:hover {
            background-color: #218c54;
            border-color: #218c54;
        }

    .table-bordered {
        border: 2px solid #dee2e6;
    }

    .table-light {
        background-color: #f8f9fa;
    }

    .container {
        font-family: Arial, sans-serif;
        max-width: 800px;
    }
</style>

@code {
    private List<Transaction> SortedTransactions = new List<Transaction>();
    private List<Transaction> FilteredTransactions = new List<Transaction>();
    private string SortOrder;
    private string SearchTitle;

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsAsync();
    }

    private async Task LoadTransactionsAsync()
    {
        SortedTransactions = TransactionService.GetTransactions().ToList();
        FilteredTransactions = SortedTransactions;
    }

    private void OnSortAndSearch()
    {
        ApplySorting();
        ApplySearchFilter();
    }

    private void ApplySorting()
    {
        if (string.IsNullOrEmpty(SortOrder))
            return;

        SortedTransactions = SortOrder switch
        {
            "dateAsc" => SortedTransactions.OrderBy(t => t.Date).ToList(),
            "dateDesc" => SortedTransactions.OrderByDescending(t => t.Date).ToList(),
            "amountAsc" => SortedTransactions.OrderBy(t => t.Amount).ToList(),
            "amountDesc" => SortedTransactions.OrderByDescending(t => t.Amount).ToList(),
            _ => SortedTransactions
        };
    }

    private void ApplySearchFilter()
    {
        if (string.IsNullOrWhiteSpace(SearchTitle))
        {
            FilteredTransactions = SortedTransactions;
        }
        else
        {
            FilteredTransactions = SortedTransactions
                .Where(t => t.Title.Contains(SearchTitle, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}
