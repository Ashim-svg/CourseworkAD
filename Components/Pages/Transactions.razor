@page "/counter"
@using CourseworkAD.Model
@using CourseworkAD.Services
@inject TransactionService TransactionService
@inject NavigationManager NavigationManager

<div class="add-transaction-page container mt-5">
    <div class="card shadow border-0">
        <div class="card-header bg-success text-white">
            <h4 class="mb-0">Add New Transaction</h4>
        </div>
        <div class="card-body">
            <form @onsubmit="HandleAddTransaction">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="title" class="form-label">Transaction Title</label>
                        <input type="text" id="title" class="form-control" @bind="Transaction.Title" placeholder="Enter transaction title" required />
                    </div>
                    <div class="col-md-6">
                        <label for="type" class="form-label">Transaction Type</label>
                        <select id="type" class="form-select" @bind="Transaction.Type" required>
                            <option value="" disabled selected>Select Type</option>
                            <option value="Credit">Credit</option>
                            <option value="Debit">Debit</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="amount" class="form-label">Amount</label>
                        <input type="number" id="amount" class="form-control" @bind="Transaction.Amount" placeholder="Enter amount" min="0" required />
                    </div>
                    <div class="col-md-6">
                        <label for="date" class="form-label">Date</label>
                        <input type="date" id="date" class="form-control" @bind="Transaction.Date" required />
                    </div>
                </div>
                <div class="mb-3">
                    <label for="tags" class="form-label">Tags</label>
                    <input type="text" id="tags" class="form-control" @bind="Transaction.Tags" placeholder="Enter tags separated by commas" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes (Optional)</label>
                    <textarea id="notes" class="form-control" @bind="Transaction.Notes" placeholder="Add any notes"></textarea>
                </div>
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary me-3" @onclick="NavigateToDashboard">Cancel</button>
                    <button type="submit" class="btn btn-success">Add Transaction</button>
                </div>
            </form>

            @if (ShowMessage)
            {
                    <div class="alert @AlertClass mt-4">
                    @Message
                    </div>
            }
        </div>
    </div>
</div>

<style>
    .add-transaction-page {
        max-width: 800px;
        margin: auto;
        font-family: 'Arial', sans-serif;
    }

    .form-label {
        font-weight: bold;
        font-size: 1.1rem;
    }

    .form-control, .form-select {
        font-size: 1rem;
        padding: 0.75rem;
    }

    .btn {
        font-size: 1rem;
        padding: 0.5rem 1.5rem;
    }

    .card-header {
        border-bottom: 2px solid #28a745;
    }

    .alert {
        font-size: 1rem;
        font-weight: bold;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>

@code {
    private Transaction Transaction = new Transaction();
    private bool ShowMessage = false;
    private string AlertClass = "alert-success";
    private string Message = "";

    private async Task HandleAddTransaction()
    {
        if (string.IsNullOrWhiteSpace(Transaction.Title) || string.IsNullOrEmpty(Transaction.Type))
        {
            ShowFeedback("Please fill all required fields.", "alert-danger");
            return;
        }

        try
        {
            // Set default date if not provided
            Transaction.Date = Transaction.Date == DateTime.MinValue ? DateTime.Now : Transaction.Date;

            // Add transaction through service
            var response = await Task.Run(() => TransactionService.AddTransaction(Transaction));

            if (response.StartsWith("Error"))
            {
                ShowFeedback(response, "alert-danger");
            }
            else
            {
                ShowFeedback("Transaction added successfully!", "alert-success");
                Transaction = new Transaction(); // Reset form
            }
        }
        catch (Exception ex)
        {
            ShowFeedback($"An error occurred: {ex.Message}", "alert-danger");
        }
    }

    private void ShowFeedback(string message, string alertClass)
    {
        Message = message;
        AlertClass = alertClass;
        ShowMessage = true;
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/");
    }
}
